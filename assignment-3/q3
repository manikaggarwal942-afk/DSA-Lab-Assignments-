#include <iostream>
#include <stack>
using namespace std;

bool isBalanced(string expr) {
    stack<char> s;

    for (char ch : expr) {
        // Push opening brackets
        if (ch == '(' || ch == '{' || ch == '[')
            s.push(ch);

        // When a closing bracket is found
        else if (ch == ')' || ch == '}' || ch == ']') {
            if (s.empty()) return false; // No matching opening bracket

            char top = s.top();
            s.pop();

            // Check if pair matches
            if ((ch == ')' && top != '(') ||
                (ch == '}' && top != '{') ||
                (ch == ']' && top != '['))
                return false;
        }
    }

    // If stack is empty â†’ all brackets matched
    return s.empty();
}

int main() {
    string expr;
    cout << "Enter an expression: ";
    cin >> expr;

    if (isBalanced(expr))
        cout << "The expression has balanced parentheses.\n";
    else
        cout << "The expression does NOT have balanced parentheses.\n";

    return 0;
}
