#include <iostream>
using namespace std;

#define SIZE 5  // maximum size of the stack

class Stack {
    int arr[SIZE];
    int top;

public:
    Stack() { top = -1; }

    //  Push operation
    void push(int value) {
        if (isFull()) {
            cout << "Stack Overflow! Cannot push " << value << endl;
        } else {
            arr[++top] = value;
            cout << value << " pushed into the stack.\n";
        }
    }

    //  Pop operation
    void pop() {
        if (isEmpty()) {
            cout << "Stack Underflow! No element to pop.\n";
        } else {
            cout << arr[top--] << " popped from the stack.\n";
        }
    }

    //  Check if empty
    bool isEmpty() {
        return (top == -1);
    }

    //  Check if full
    bool isFull() {
        return (top == SIZE - 1);
    }

    // Display all elements
    void display() {
        if (isEmpty()) {
            cout << "Stack is empty.\n";
        } else {
            cout << "Stack elements (top to bottom): ";
            for (int i = top; i >= 0; i--)
                cout << arr[i] << " ";
            cout << endl;
        }
    }

    //  Peek at top element
    void peek() {
        if (isEmpty()) {
            cout << "Stack is empty.\n";
        } else {
            cout << "Top element: " << arr[top] << endl;
        }
    }
};

int main() {
    Stack s;
    int choice, value;

    do {
        cout << "\n*** STACK MENU ***\n";
        cout << "1. Push\n2. Pop\n3. isEmpty\n4. isFull\n5. Display\n6. Peek\n7. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter value to push: ";
            cin >> value;
            s.push(value);
            break;
        case 2:
            s.pop();
            break;
        case 3:
            cout << (s.isEmpty() ? "Stack is Empty.\n" : "Stack is not Empty.\n");
            break;
        case 4:
            cout << (s.isFull() ? "Stack is Full.\n" : "Stack is not Full.\n");
            break;
        case 5:
            s.display();
            break;
        case 6:
            s.peek();
            break;
        case 7:
            cout << "Exiting program...\n";
            break;
        default:
            cout << "Invalid choice! Please try again.\n";
        }
    } while (choice != 7);

    return 0;
}
